"""
Django settings for snowsune project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import re
import logging
from pathlib import Path
import sys
from typing import Any, Dict, cast

# Logging setup
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "debug.log",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "default-secret-key")
BAD_KEY = SECRET_KEY == "default-secret-key"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "false").lower() == "true"

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(",")

# Site URL for webhooks and external links
SITE_URL = os.getenv("SITE_URL", "https://snowsune.net")

# For django-tracking

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # External apps
    "tracking",
    # Main app
    "snowsune",
    # Custom apps
    "apps.users",
    "apps.blog",
    "apps.comics",
    "apps.characters",
    "apps.pages",
    "apps.commorganizer",  # Commission Organizer app
    "apps.notifications",  # Centralized notification system
    "apps.thank_yous",  # Thank yous management app
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # For serving static files
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "tracking.middleware.VisitorTrackingMiddleware",  # For tracking user visits
]

# Trust reverse proxy headers
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

ROOT_URLCONF = "snowsune.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "snowsune.context_processors.version_processor",
                "snowsune.context_processors.year_processor",
                "snowsune.context_processors.debug_mode",
                "snowsune.context_processors.expiry_links",
                "snowsune.context_processors.visit_stats",
                "snowsune.context_processors.discord_invite_link",  # TODO: Make generic!
                "apps.notifications.context_processors.notifications_processor",
            ],
        },
    },
]

WSGI_APPLICATION = "snowsune.wsgi.application"

# Database configuration
DATABASES: Dict[str, Dict[str, Any]] = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Use PostgreSQL if DATABASE_URL is provided
DATABASE_URL = os.getenv("DATABASE_URL", None)
if DATABASE_URL:
    import dj_database_url

    parsed = dj_database_url.parse(DATABASE_URL)
    DATABASES["default"] = cast(Dict[str, Any], parsed)

# I'll use a custom user model for user-storage
AUTH_USER_MODEL = "users.CustomUser"

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "America/New_York"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Normal Static Files
    BASE_DIR / "apps/characters/static",  # Characters have their own static files too
    BASE_DIR / "apps/comics/static",  # Comics
    BASE_DIR / "apps/thank_yous/static",  # Thank Yous
]

# Media Paths (things like profile pictures and such are uploaded here)
MEDIA_URL = "/media/"  # Base of the URL for media
MEDIA_ROOT = os.environ.get("MEDIA_ROOT", str(BASE_DIR / "media"))

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Login and logout redirects
LOGIN_URL = "login"  # This tells Django where to redirect for login
LOGIN_REDIRECT_URL = "home"  # Where to redirect after successful login
LOGOUT_REDIRECT_URL = "home"  # Where to redirect after logout

# HTTPS and security settings (adjust for production)
SESSION_COOKIE_SECURE = False  # Set to True in production
CSRF_COOKIE_SECURE = False  # Set to True in production
SECURE_SSL_REDIRECT = False  # Set to True in production
SECURE_HSTS_SECONDS = 0  # Enable HSTS in production
SECURE_HSTS_PRELOAD = False
SECURE_HSTS_INCLUDE_SUBDOMAINS = False

# If we're testing
if "test" in sys.argv:
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": ":memory:",
    }
