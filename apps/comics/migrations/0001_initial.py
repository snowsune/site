# Generated by Django 5.1.6 on 2025-07-30 19:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ComicPage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("comic_url", models.URLField(max_length=500)),
                ("comic_date", models.DateField()),
                ("page_number", models.PositiveIntegerField(blank=True, null=True)),
                ("chapter", models.CharField(blank=True, max_length=100, null=True)),
                ("image_url", models.URLField(blank=True, max_length=500, null=True)),
                ("alt_text", models.TextField(blank=True, null=True)),
                ("discovered_at", models.DateTimeField(auto_now_add=True)),
                ("is_processed", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["-comic_date", "-discovered_at"],
            },
        ),
        migrations.CreateModel(
            name="Webcomic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly name", max_length=255, unique=True
                    ),
                ),
                (
                    "banner",
                    models.ImageField(
                        blank=True, null=True, upload_to="comics/banners/"
                    ),
                ),
                (
                    "icon",
                    models.ImageField(blank=True, null=True, upload_to="comics/icons/"),
                ),
                ("website_url", models.URLField(max_length=500)),
                (
                    "rss_feed_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                (
                    "polling_method",
                    models.CharField(
                        choices=[
                            ("rss", "RSS Feed"),
                            ("scraper", "Web Scraper"),
                            ("manual", "Manual Entry"),
                        ],
                        default="rss",
                        max_length=20,
                    ),
                ),
                (
                    "scraper_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuration for BeautifulSoup scraper (CSS selectors, etc.)",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("last_polled", models.DateTimeField(blank=True, null=True)),
                ("last_updated", models.DateTimeField(blank=True, null=True)),
                (
                    "latest_comic_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                (
                    "latest_comic_title",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("latest_comic_date", models.DateField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("author", models.CharField(blank=True, max_length=255, null=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="NotificationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("rss", "RSS"),
                            ("discord", "Discord"),
                        ],
                        max_length=20,
                    ),
                ),
                ("sent_at", models.DateTimeField(auto_now_add=True)),
                ("success", models.BooleanField(default=True)),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "comic_page",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="comics.comicpage",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "webcomic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="comics.webcomic",
                    ),
                ),
            ],
            options={
                "ordering": ["-sent_at"],
            },
        ),
        migrations.AddField(
            model_name="comicpage",
            name="webcomic",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="comics.webcomic"
            ),
        ),
        migrations.CreateModel(
            name="UserSubscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("rss_enabled", models.BooleanField(default=True)),
                ("discord_notifications", models.BooleanField(default=False)),
                (
                    "notification_frequency",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediate"),
                            ("daily", "Daily Digest"),
                            ("weekly", "Weekly Digest"),
                        ],
                        default="immediate",
                        max_length=20,
                    ),
                ),
                ("subscribed_at", models.DateTimeField(auto_now_add=True)),
                ("last_notified", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "webcomic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="comics.webcomic",
                    ),
                ),
            ],
            options={
                "ordering": ["webcomic__name"],
                "unique_together": {("user", "webcomic")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="comicpage",
            unique_together={("webcomic", "comic_url")},
        ),
    ]
